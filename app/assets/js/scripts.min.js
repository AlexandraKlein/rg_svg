/*!
 * fastshell
 * Fiercely quick and opinionated front-ends
 * https://HosseinKarami.github.io/fastshell
 * @author Hossein Karami
 * @version 1.0.5
 * Copyright 2018. MIT licensed.
 */
!function(t,r,a,i){"use strict";t(function(){function r(t){return a.createElementNS("http://www.w3.org/2000/svg",t)}function i(a){var i=t(a).find("rect");t.each(i,function(){var a=t(this).attr("x"),i=t(this).attr("y"),s=parseFloat(a)+parseFloat(t(this).attr("width")),e=parseFloat(i)+parseFloat(t(this).attr("height")),n="M"+a+","+i+" "+s+","+i+" "+s+","+e+" "+a+","+e+" "+a+","+i;t(r("path")).attr("d",n).attr("fill",t(this).attr("fill")).attr("stroke",t(this).attr("stroke")).attr("stroke-width",t(this).attr("stroke-width")).attr("stroke-linecap",t(this).attr("stroke-linecap")).insertAfter(this)}),t(i).remove()}function s(a){var i=t(a).find("line");t.each(i,function(){var a=t(this).attr("x1"),i=t(this).attr("y1"),s=t(this).attr("x2"),e=t(this).attr("y2"),n="M"+a+","+i+" "+s+","+e;t(r("path")).attr("d",n).attr("fill",t(this).attr("fill")).attr("stroke",t(this).attr("stroke")).attr("stroke-width",t(this).attr("stroke-width")).attr("stroke-linecap",t(this).attr("stroke-linecap")).insertAfter(this)}),t(i).remove()}function e(a){var i=t(a).find("circle");t.each(i,function(){var a=t(this).attr("cx"),i=t(this).attr("cy"),s=t(this).attr("r"),e=parseFloat(2*s),n="M"+a+", "+i+" m"+-s+", 0 a "+s+", "+s+" 0 1,0 "+e+",0 a "+s+", "+s+" 0 1,0 "+-e+",0 ";t(r("path")).attr("d",n).attr("fill",t(this).attr("fill")).attr("stroke",t(this).attr("stroke")).attr("stroke-width",t(this).attr("stroke-width")).attr("stroke-linecap",t(this).attr("stroke-linecap")).insertAfter(this)}),t(i).remove()}function n(a){var i=t(a).find("ellipse");t.each(i,function(){var a=t(this).attr("cx"),i=t(this).attr("cy"),s=t(this).attr("rx"),e=t(this).attr("ry"),n="M"+a+", "+i+" m"+-s+", 0 a "+s+", "+e+" 0 1,0 "+2*s+",0 a "+s+", "+e+" 0 1,0 "+2*-s+",0 ";t(r("path")).attr("d",n).attr("fill",t(this).attr("fill")).attr("stroke",t(this).attr("stroke")).attr("stroke-width",t(this).attr("stroke-width")).attr("stroke-linecap",t(this).attr("stroke-linecap")).insertAfter(this)}),t(i).remove()}function h(a){var i=t(a).find("polygon");t.each(i,function(){var a=t(this).attr("points"),i=a.split(/[ ,]+/),s=i[0]+", "+i[1];t(r("path")).attr("d","M"+a+" "+s).attr("fill",t(this).attr("fill")).attr("stroke",t(this).attr("stroke")).attr("stroke-width",t(this).attr("stroke-width")).attr("stroke-linecap",t(this).attr("stroke-linecap")).insertAfter(this)}),t(i).remove()}function o(a){var i=t(a).find("polyline");t.each(i,function(){var a=t(this).attr("points");t(r("path")).attr("d","M"+a).attr("fill",t(this).attr("fill")).attr("stroke",t(this).attr("stroke")).attr("stroke-width",t(this).attr("stroke-width")).attr("stroke-linecap",t(this).attr("stroke-linecap")).insertAfter(this)}),t(i).remove()}function c(r,a,i,s){var e=t(r).find("path");t.each(e,function(r){var e=this.getTotalLength();t(this).css({"stroke-dashoffset":e,"stroke-dasharray":e+" "+e}),t(this).delay(s*r).animate({"stroke-dashoffset":0},{duration:Math.floor(Math.random()*i)+a,easing:"easeInOutQuad"})})}function l(t){i(t),s(t),n(t),e(t),h(t),o(t)}function f(t){c(t,250,500,25)}t.extend(t.easing,{easeInOutQuad:function(t,r,a,i,s){return(r/=s/2)<1?i/2*r*r+a:-i/2*(--r*(r-2)-1)+a}}),t("section.svg-container").each(function(){t(this).find("button").click(function(){l(t(this).siblings("svg")),f(t(this).siblings("svg"))})})})}($,window,document);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
